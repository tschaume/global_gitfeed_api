#!/usr/bin/env python
# push to api.the-huck.com
# use environment variables for API credentials

import requests, json, os, string, sys, git, string, argparse, re
from requests.auth import HTTPBasicAuth
from datetime import datetime
from fnmatch import fnmatch
from email.utils import formatdate

# production config
API = 'api.the-huck.com'
username = os.environ['API_THEHUCK_USER']
password = os.environ['API_THEHUCK_PWD']

# development config
#API = '127.0.0.1:5000'
#username = password = 'admin'

# API endpoints
gitcommits = 'http://%s/gitcommits' % API

# parse arguments
parser = argparse.ArgumentParser()
parser.add_argument(
  "name", help="Name of the remote to which the push is being done"
)
parser.add_argument("url", help="URL to which the push is being done")
args = parser.parse_args()

# get the payload of commits
# TODO: other than default remote and branch? '--all'
# NOTE: remove projects via DELETE curl requests, not in MongoDB itself!
print 'determine api payload ...'
project = os.path.splitext(os.path.basename(args.url))[0]
project = string.split(project, ':')[-1]
project = re.compile(ur'[\W]+',re.UNICODE).sub('_',project.strip())
pars = {'where': ''.join(['{"project":"', project, '"}'])}
r = requests.get(gitcommits, params=pars)
shas = [ c['sha1'] for c in r.json()['_items'] ]
project_dir = os.environ['PWD']
repo = git.Repo(project_dir)
author = 'Patrick*'
payload = [
  {
    'project': project, 'message': c.summary,
    'datetime': formatdate(timeval=c.committed_date, localtime=False, usegmt=True),
    'sha1': string.split(c.name_rev)[0],
    'deletions': c.stats.total.get('deletions'),
    'lines': c.stats.total.get('lines'),
    'insertions': c.stats.total.get('insertions'),
    'files': c.stats.total.get('files')
  }
  for c in repo.iter_commits() if (
    fnmatch(c.author.name, author) and
    string.split(c.name_rev)[0] not in shas
  )
]

# push payload to API
print 'pushing %r commit(s)' % len(payload)
headers = {'content-type': 'application/json'}
requests.post(
  gitcommits, data=json.dumps(payload), headers=headers,
  auth=HTTPBasicAuth(username, password)
)
