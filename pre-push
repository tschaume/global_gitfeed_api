#!/usr/bin/env python
# push to api.the-huck.com
# use environment variables for API credentials

import requests, json, os, string, sys, git, string, argparse
from requests.auth import HTTPBasicAuth
from datetime import datetime
from fnmatch import fnmatch
from email.utils import formatdate

# production config
API = 'api.the-huck.com'
username = os.environ['API_THEHUCK_USER']
password = os.environ['API_THEHUCK_PWD']

# development config
#API = '127.0.0.1:5000'
#username = password = 'admin'

# API endpoints
gitprojects = 'http://%s/gitprojects' % API
gitcommits = 'http://%s/gitcommits' % API

# project name & url
parser = argparse.ArgumentParser()
parser.add_argument(
  "name", help="Name of the remote to which the push is being done"
)
parser.add_argument("url", help="URL to which the push is being done")
args = parser.parse_args()
project = os.path.splitext(os.path.basename(args.url))[0]
project = string.split(project, ':')[-1]
project = re.compile(ur'[\W]+',re.UNICODE).sub('_',project.strip())
project_url = '%s/%s' % (gitprojects, project)
print project_url

# check whether project exists, add if not
project_existed = True
if requests.get(project_url).status_code != requests.codes.ok:
  print 'adding %s' % project
  r = requests.post(
    gitprojects, data={'name': project},
    auth=HTTPBasicAuth(username, password)
  )
  r.raise_for_status()
  project_existed = False

# get the payload of commits
# TODO: other than first remote and active branch? '--all'
print 'determine payload ...'
project_id = requests.get(project_url).json().get('_id')
project_dir = os.environ['PWD']
repo = git.Repo(project_dir)
remote = repo.remotes[0].name
branch = repo.active_branch
author = 'Patrick*'
payload = [
  {
    'project': project_id, 'message': c.summary,
    'datetime': formatdate(timeval=c.committed_date, localtime=False, usegmt=True),
    'sha1': string.split(c.name_rev)[0],
    'deletions': c.stats.total.get('deletions'),
    'lines': c.stats.total.get('lines'),
    'insertions': c.stats.total.get('insertions'),
    'files': c.stats.total.get('files')
  }
  for c in repo.iter_commits(
    '%s/%s..HEAD' %(remote, branch) if project_existed else None
  )
  if fnmatch(c.author.name, author)
]

# push payload to API
print 'pushing %r commit(s)' % len(payload)
headers = {'content-type': 'application/json'}
requests.post(
  gitcommits, data=json.dumps(payload), headers=headers,
  auth=HTTPBasicAuth(username, password)
)
